% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corr_rewire.R
\name{corrmat_rand}
\alias{corrmat_rand}
\title{Strength Preserving Correlation Matrix Randomizer}
\usage{
corrmat_rand(org_corr, sampleSize, n, tol = 1e-04, stepSize = 0.001,
  verbose = F)
}
\arguments{
\item{org_corr}{A \eqn{p \times p}  positive definite covariance (which will be transformed into a correlation matrix) or a correlation matrix}

\item{sampleSize}{The sample size for a correlation matrix, lower values for more sampling error}

\item{n}{Number of random correlations matrices to return}

\item{tol}{Tolerance for configuration model convergence. Default to .0001}

\item{stepSize}{Step size for configuration model NR solver. Increase to increase convergence speed. Default to .001}

\item{verbose}{Print convergence information to screen.}
}
\value{
A list containing:  A \eqn{p \times p \times n} array of rewired correlation matrices and a \eqn{p \times p} matrix of the configuration model.
}
\description{
This function implements the Masuda, Kojaku & Sano (2018) "Configuration model for correlation matrices preserving the node strength" algorithm for 
generating correlation matrices that have the same strength distribution as the original matrix.
}
\examples{

org_corr = matrix(0, 20, 20)

org_corr[1:10, 1:10] = .5
org_corr[11:20, 11:20] = .5

noise = t(sapply(as.list(1:100),FUN= function(x){return(rnorm(20,0,1))}))

org_corr = cov2cor(org_corr + cov(noise))

rand_corr = corrmat_rand(org_corr, 10000, 1)[[1]]

org_strength = colSums(org_corr)
rand_strength = colSums(rand_corr)

cor(org_strength, rand_strength)
}
